import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('sales_data_sample.csv', encoding='latin1')

# Select relevant numeric columns
df_numeric = df[['SALES', 'QUANTITYORDERED', 'PRICEEACH']]

# Drop rows with missing values
df_numeric = df_numeric.dropna()

# Standardize the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_numeric)

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df_scaled)
    wcss.append(kmeans.inertia_)

# Plotting the elbow curve
plt.figure(figsize=(10, 6))
sns.lineplot(x=range(1, 11), y=wcss, marker='o')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Assuming the elbow method suggests 3 clusters
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)
df['Cluster'] = kmeans.fit_predict(df_scaled)

# Add cluster labels to the original dataframe
df['Cluster'] = df['Cluster'].astype(str)  # Convert to string for better plotting

# Plotting
sns.pairplot(df, vars=['SALES', 'QUANTITYORDERED', 'PRICEEACH'], hue='Cluster', palette='Set1')
plt.title('Clusters Visualization')
plt.show()
